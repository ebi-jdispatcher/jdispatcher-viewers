{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"jdispatcher-viewers","text":"<p>Job Dispatcher viewers is a TypeScript module that uses Fabric.js (based on a HTML canvas) to implement interactive visualisations, Visual Output and Functional Predictions. The app is provided as an ES module, can be used as plugin and  also as Web Components. A Node.js CLI application is also provided to generate static figures in SVG and PNG formats.</p> <p>Live Demo</p>"},{"location":"#visual-output","title":"Visual Output","text":"<p>Visual Output is a diagram visualisation for the hit sequences of sequence similarity tools (e.g.  NCBI BLAST+ and  FASTA, that highlights the region of the sequences that is matching the query sequence and provides corresponding E-values.  This currently works only with Job Dispatcher Job IDs, as it depends on the JSON output provided by the service.</p> <p></p>"},{"location":"#functional-predictions","title":"Functional Predictions","text":"<p>Functional Predictions is a diagram of the domain ranges that compose hit sequences of sequence  similarity tools (e.g. NCBI BLAST+ and FASTA. This visualisation gives a good overview of domain location vs hit/query sequence matching. Predictions are obtained from  InterPro and cover several domain databases/resources, including: Pfam, SUPERFAMILY, SMART, CATH-Gene3D, CDD, etc.</p> <p></p>"},{"location":"#colouring-and-selection-of-scores","title":"Colouring and selection of scores","text":"<p>Six colouring schemes can be selected along side scale type and score. The scale types are either <code>dynamic</code>, i.e. the scale ranges from the 'local' minimum to maximum score found in the results, or <code>fixed</code>, where the range is pre-defined based on the score being used. There is a selection of scores that can be selected, <code>E-value</code> being the default. Besides E-value, sequence <code>identity</code> and <code>similarity</code>, as well as, <code>bit score</code> can selected. The colouring schemes currently provided are: - <code>Heatmap</code>: from red to blue (multiple hues) - <code>Greyscale</code>: a grey scale (single hue) - <code>Sequential</code>: a blue scale (single hue) - <code>Divergent</code>: red to yellow to green  (multiple hues) - <code>Qualitative</code>: categorical colouring (multiple hues) - <code>NCBI BLAST+</code>: NCBI BLAST+ based categorical colouring (multiple hues)  </p>"},{"location":"#dependencies-and-installation","title":"Dependencies and Installation","text":"<p>Building the applications requires Node.js (tested with v16.16.0 and v18.7.0).  Additional requirements, are downloaded and installed automatically with npm CLI.  See full list of dependencies in package.json</p>"},{"location":"#development-server","title":"Development server","text":"<p>During development, you can simply clone this repository and install all the dependencies required to run the webpack and webpack-dev-server:</p> <pre><code>npm install\n</code></pre> <p>To play with the development server (watches for file changes), in two terminal windows in parallel, run:</p> <pre><code># runs a server at localhost:8080\nnpm run dev\n</code></pre> <pre><code># builds the package and copies index.html over to ./dist\nnpm run dev2\n</code></pre>"},{"location":"#building-the-application","title":"Building the application","text":"<p>To compile the application for production, run:</p> <pre><code>npm run build\n</code></pre>"},{"location":"#developing-the-cli","title":"Developing the CLI","text":"<p>To compile the CLI during development (watches for file changes), run:</p> <pre><code>npm run dev:cli\n</code></pre>"},{"location":"#building-the-cli","title":"Building the CLI","text":"<p>To compile the CLI for production, run:</p> <pre><code>npm run build:cli\n</code></pre>"},{"location":"#running-the-cli","title":"Running the CLI","text":"<p>Test the CLI by simply running (or passing the options <code>-h</code> or <code>--help</code>):</p> <pre><code>node --es-module-specifier-resolution=node bin/jd-viewers-cli.js\n</code></pre> <p>Testing the CLI using a <code>mock</code> jobId, which loads data from files under <code>./src/testdata</code>.</p> <pre><code>node --es-module-specifier-resolution=node bin/jd-viewers-cli.js vo -i mock_jobid-I20200317-103136-0485-5599422-np2 -o test.png -of png -v\n</code></pre> <p>Passing the same local files:</p> <pre><code>node --es-module-specifier-resolution=node bin/jd-viewers-cli.js fp -i ./src/testdata/ncbiblast.json -ix ./src/testdata/iprmc.xml -o test.svg -of svg -v\n</code></pre> <p>Passing a valid JobId (replace with a current JobId, as this one might have expired), where the data will be fetched and stored locally:</p> <pre><code>node --es-module-specifier-resolution=node bin/jd-viewers-cli.js fp -i ncbiblast-R20200602-114955-0302-11398737-np2 -o test.svg -of svg -v\n</code></pre> <p>Some rendering options can be optionally passed to the CLI, including: <code>-hits</code>, number of hits; <code>-hsps</code>, number of HSPs; and <code>-color</code>, color scheme. For example:</p> <pre><code>node --es-module-specifier-resolution=nodebin/jd-viewers-cli.js fp -i ncbiblast-R20200602-114955-0302-11398737-np2 -o test.svg -of svg -color 'ncbiblast' -hits 50 -v\n</code></pre>"},{"location":"#publishing-npm-package","title":"Publishing NPM package","text":"<p>This package has been published to NPM at  @ebi-jdispatcher/jdispatcher-viewers.</p> <pre><code># npm package under ebi-jdispatcher org\nnpm init --scope=@ebi-jdispatcher\n# testing building the package\nnpm install\n# publish to npm\nnpm publish --access public\n</code></pre>"},{"location":"#bug-tracking","title":"Bug Tracking","text":"<p>If you find any bugs or issues please log them in the issue tracker.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>See CHANGELOG.md.</p>"},{"location":"#licensing","title":"Licensing","text":"<p>The European Bioinformatics Institute - EMBL-EBI, is an Intergovernmental Organization which, as part of the European Molecular Biology Laboratory family, focuses on research and services in bioinformatics.</p> <p>Apache License 2.0. See LICENSE for details.</p>"},{"location":"demo/","title":"Demo","text":"<p>This demo works with a pre-loaded example, but you can also pass a valid Job Dispatcher job ID.</p> Job ID: Generate Visual Output Generate Functional Predictions <p> </p>"},{"location":"development/","title":"Developing a new visualisation","text":"<p>This documentation describes how to build an interactive visualization using Fabric.js and jdispatcher-viewers. The visualisation leverages Fabric.js objects (e.g., rectangles) to create a dynamic, customizable canvas-based experience.</p>"},{"location":"development/#overview","title":"Overview","text":"<p>Fabric.js supports features like gradient fills, object manipulation, and dynamic updates, making it suitable for applications such as biological data visualisation. Here we demonstrate how to build a small basic visualisation for viewing protein domain annotations on a sequence track.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Fabric.js: Tested with version 5.4.0</li> <li>TypeScript: Tested with version 4.9</li> <li>Browser: Modern browser with Canvas support</li> </ul>"},{"location":"development/#installation","title":"Installation","text":"<ol> <li>Include Fabric.js in your new project:    <pre><code>npm install fabric\n</code></pre></li> <li>Likewise, you need to install jdispatcher-viewers:    <pre><code>npm install jdispatcher-viewers\n</code></pre></li> </ol>"},{"location":"development/#using-jdispatcher-viewers","title":"Using jdispatcher-viewers","text":"<p>For an example of how <code>jdispatcher-viewers</code> is used to provide the two main visualisations, Visual Output and Functional Predictions, see index.ts.</p>"},{"location":"development/#creating-a-new-visualisation-with-fabricjs-and-some-of-the-jdispatcher-viewers-utilities","title":"Creating a new visualisation with Fabric.js and some of the jdispatcher-viewers utilities","text":"<p>Before starting, ensure you have basic knowledge of Fabric.js for canvas rendering as jdispatcher-viewers builds on top of that.</p> <p>Below is a step-by-step guide to setting up a basic Fabric.js visualization using a <code>&lt;script&gt;</code> tag to load Fabric.js and a <code>&lt;canvas&gt;</code> element to render the visualization.</p>"},{"location":"development/#html-based-example","title":"HTML based example","text":"<ol> <li>Create wew HTML file (e.g. 'demo.html') and set up a canvas element:</li> </ol> <p><pre><code>  &lt;!DOCTYPE html&gt;\n  &lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Fabric.js and jdispatcher-viewers Demo&lt;/title&gt;\n    &lt;style&gt;\n    canvas {\n      border: 1px solid #ccc;\n\n    }\n  &lt;/style&gt;\n  &lt;!-- Load Fabric.js from a CDN with defer --&gt;\n  &lt;script\n    type=\"text/javascript\"\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.4.0/fabric.min.js\"\n    defer\n  &gt;&lt;/script&gt;\n\n  &lt;!-- Load jdispatcher-viewers --&gt;\n  &lt;script\n    type=\"text/javascript\"\n    src=\"https://ebi-jdispatcher.github.io/jdispatcher-viewers/assets/jd_viewers_0.1.6.bundle.min.js\"\n    defer\n  &gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- Canvas --&gt;\n    &lt;div id=\"canvas-wrapper\"&gt;\n      &lt;canvas id=\"canvas\" /&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Your custom script --&gt;\n    &lt;script&gt;\n      // Your Fabric.js code goes here\n    &lt;/script&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> 2. Initialize Fabric.js</p> <p>Inside the <code>&lt;script&gt;</code> tag, initialize Fabric.js and create a canvas object:</p> <p><pre><code>  // Wrap script with a DOMContentLoaded event listener \n  document.addEventListener(\"DOMContentLoaded\", () =&gt; {\n\n  // Get the canvas element\n  const canvasElement = document.getElementById(\"canvas\");\n\n  // Initialize Fabric.js canvas\n  const startupDef = {\n    defaultCursor: 'default',\n    moveCursor: 'default',\n    hoverCursor: 'default',\n    backgroundColor: '#ffffff',\n  };\n  const canvas = new fabric.Canvas(canvasElement, startupDef);\n});\n</code></pre> 3. Add objects to the canvas:</p> <p>Now, you can add objects like title, domain label and domain track:</p> <p><pre><code>    // set a number of variables\n    let topPadding = 0;\n    let canvasWidth = 800;\n    let canvasHeight = 100;\n    let contentWidth = 300;\n    let marginWidth = (0.15 * canvasWidth) / 100;\n    let fontSize = 14;\n    let fontWeigth = \"normal\";\n    let fontFamily = \"Arial\";\n\n    // set height and width of the canvas\n    canvas.setWidth(canvasWidth);\n    canvas.setHeight(canvasHeight);\n\n    // draw title\n    topPadding += 20;\n    const titleObj = { ...JDViewers.textDefaults };\n    titleObj.fontWeight = \"bold\";\n    titleObj.fontSize = fontSize + 1;\n    titleObj.top = topPadding;\n    titleObj.left = contentWidth;\n    const titleText = new fabric.Text(\"Demo Visualisation\", titleObj);\n    canvas.add(titleText);\n\n    topPadding += 30;\n    // draw sequence label\n    const labelObj = { ...JDViewers.textDefaults };\n    labelObj.fontWeight = \"bold\";\n    labelObj.fontSize = fontSize + 1;\n    labelObj.top = topPadding - 10 ;\n    labelObj.left = 40;\n    const domainLabel = new fabric.Text(\"Domain\", labelObj);\n    canvas.add(domainLabel);\n\n    // draw sequence track\n    const lineTrackGroup = JDViewers.drawLineTracks(\n    {\n        startPixels: 100,\n        endPixels: 750,\n    },\n    { strokeWidth: 1 },\n    topPadding\n    );\n    canvas.add(lineTrackGroup);\n\n    // draw a domain\n    topPadding += 10;\n    const seqDomain = JDViewers.drawDomain(150, 550, topPadding, \"green\");\n    canvas.add(seqDomain);\n</code></pre> 4. Add interactivity</p> <p>You can make the visualization interactive reacting to mouse hovering and clicking. For example:</p> <p><pre><code>  // domain mouse hovering and click\n  const domainObj = { id: \"domain\", name: \"test domain\", type: \"protein\" };\n  JDViewers.mouseOverDomain(\n      seqDomain,\n      150,\n      550,\n      150,\n      550,\n      domainObj,\n      { fontSize: fontSize },\n      canvas\n  );\n  JDViewers.mouseOutDomain(seqDomain, canvas);\n\n  // Mouse click display/hide domain tooltip\n  JDViewers.mouseClickDomain(\n      seqDomain,\n      150,\n      550,\n      150,\n      550,\n      domainObj,\n      {\n      fontSize: fontSize,\n      },\n      canvas\n  );\n\n  // finally, do not forget to render all elements\n  canvas.renderAll();\n</code></pre> 5. Run the demo</p> <ol> <li> <p>Open the <code>demo.html</code> file in your browser.</p> </li> <li> <p>You should see a canvas with a sequence track on domain in green.</p> </li> <li> <p>Interact with the objects (e.g., mouse hover over one of the domains or click on them to reveal the tooltip information).</p> </li> </ol>"},{"location":"development/#develop-a-new-javascripttypescript-project","title":"Develop a new JavaScript/TypeScript project","text":"<ol> <li>Initialize a new project (if you don\u2019t already have one):</li> </ol> <p><pre><code>mkdir visualisation-demo\ncd visualisation-demo\nnpm init -y\n</code></pre> 2. Install Fabric.js and jdispatcher-viewers as a dependency:</p> <p><pre><code>npm install fabric @ebi-jdispatcher/jdispatcher-viewers\n</code></pre> 3. If you're using TypeScript, install the types for Fabric.js:</p> <p><pre><code>npm install --save-dev @types/fabric\n</code></pre> 4. Set up your project structure:</p> <p><pre><code>fabric-demo/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts (or index.js)\n\u2502   \u251c\u2500\u2500 styles.css\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json (if using TypeScript)\n\u2514\u2500\u2500 webpack.config.js (or vite.config.js, etc.)\n</code></pre> 5. Create an HTML File</p> <p>Create an <code>index.html</code> file in the root of your project:</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Fabric.js and jdispatcher-viewers Demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"canvas-wrapper\"&gt;\n    &lt;canvas id=\"canvas\" /&gt;\n  &lt;/div&gt;\n  &lt;script src=\"./dist/bundle.js\"&gt;&lt;/script&gt; &lt;!-- Output bundle file --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 6. Add Styles</p> <p>Create a styles.css file in the <code>src/</code> folder:</p> <p><pre><code>canvas {\n  border: 1px solid #ccc;\n  background-color: #fff;\n}\n</code></pre> 7. Add a TypeScript/JavaScript</p> <p>Create an <code>index.ts</code> (or <code>index.js</code>) file in the <code>src/</code> folder. For example for TypeScript:</p> <p><pre><code>import { fabric } from \"fabric\";\nimport {\n  BasicCanvasRenderer,\n  RenderOptions,\n  textDefaults,\n  drawLineTracks,\n  mouseOverDomain,\n  mouseClickDomain,\n  mouseOutDomain,\n  drawDomain,\n} from \"@ebi-jdispatcher/jdispatcher-viewers\";\n\n// Get the canvas element\nexport class DemoVisualisation extends BasicCanvasRenderer {\n  private topPadding: number = 0;\n  private queryLen: number = 0;\n  private subjLen: number = 0;\n  private startQueryPixels: number;\n  private endQueryPixels: number;\n  private startEvalPixels: number;\n  private startSubjPixels: number;\n  private endSubjPixels: number;\n  private gradientSteps: number[] = [];\n  private queryFactor: number = 1.0;\n  private subjFactor: number = 1.0;\n\n  constructor(\n    element: string | HTMLCanvasElement,\n    renderOptions: RenderOptions\n  ) {\n    super(element);\n\n    console.log(\"vlieeded\");\n\n    renderOptions.canvasWidth != undefined\n      ? (this.canvasWidth = renderOptions.canvasWidth)\n      : (this.canvasWidth = 800);\n    renderOptions.canvasHeight != undefined\n      ? (this.canvasHeight = renderOptions.canvasHeight)\n      : (this.canvasHeight = 100);\n    renderOptions.contentWidth != undefined\n      ? (this.contentWidth = renderOptions.contentWidth)\n      : (this.contentWidth = 300);\n    renderOptions.marginWidth != undefined\n      ? (this.marginWidth = renderOptions.marginWidth)\n      : (this.marginWidth = (0.15 * this.canvasWidth) / 100);\n    renderOptions.fontSize != undefined\n      ? (this.fontSize = renderOptions.fontSize)\n      : (this.fontSize = 14);\n    renderOptions.fontWeigth != undefined\n      ? (this.fontWeigth = renderOptions.fontWeigth)\n      : (this.fontWeigth = \"normal\");\n    renderOptions.fontFamily != undefined\n      ? (this.fontFamily = renderOptions.fontFamily)\n      : (this.fontFamily = \"Arial\");\n    this.topPadding = 0;\n\n    this.getFabricCanvas();\n  }\n  public render() {\n    // clear the canvas\n    // this.canvas.clear();\n    console.log(\"rendering from canvas\");\n    // canvas title\n    this.drawHeaderGroup();\n    // canvas content\n    this.drawContentGroup();\n    // finishing off\n    this.setFrameSize();\n    // render all\n    this.renderCanvas();\n    this.canvas.renderAll();\n  }\n  protected drawHeaderGroup() {\n    this.topPadding += 2;\n\n    // draw title\n    const textObj = { ...textDefaults };\n    textObj.fontWeight = \"bold\";\n    textObj.fontSize = this.fontSize! + 1;\n    textObj.top = this.topPadding;\n    textObj.left = this.contentWidth;\n\n    const titleText = new fabric.Text(\"Demo Visualisation\", textObj);\n    this.canvas.add(titleText);\n  }\n\n  protected drawContentGroup() {\n    this.topPadding += 30;\n    // draw sequence label\n    const labelObj = { ...textDefaults };\n    labelObj.fontWeight = \"bold\";\n    labelObj.fontSize = this.fontSize + 1;\n    labelObj.top = this.topPadding - 10;\n    labelObj.left = 40;\n    const domainLabel = new fabric.Text(\"Domain\", labelObj);\n    this.canvas.add(domainLabel);\n\n    // draw sequence track\n    const lineTrackGroup = drawLineTracks(\n      {\n        startPixels: 100,\n        endPixels: 750,\n      },\n      { strokeWidth: 1 },\n      this.topPadding\n    );\n    this.canvas.add(lineTrackGroup);\n\n    // draw a domain\n    const seqDomain = drawDomain(150, 550, this.topPadding, \"orange\");\n    this.canvas.add(seqDomain);\n\n    // domain mouse hovering and click\n    const domainObj = { id: \"domain\", name: \"test domain\", type: \"protein\" };\n    mouseOverDomain(\n      seqDomain,\n      150,\n      550,\n      150,\n      550,\n      domainObj,\n      { fontSize: this.fontSize },\n      this\n    );\n    mouseOutDomain(seqDomain, this);\n\n    // Mouse click display/hide domain tooltip\n    mouseClickDomain(\n      seqDomain,\n      150,\n      550,\n      150,\n      550,\n      domainObj,\n      {\n        fontSize: this.fontSize,\n      },\n      this\n    );\n  }\n\n  protected setFrameSize() {\n    this.canvas.setWidth(this.canvasWidth);\n    this.canvas.setHeight(this.canvasHeight);\n  }\n\n  protected renderCanvas() {\n    this.canvas.renderAll();\n  }\n}\n\n(window as any).DemoVisualisation = DemoVisualisation;\n</code></pre> 8. Bundle the Project</p> <p>Using Webpack. Install Webpack and its CLI:   <pre><code>npm install --save-dev webpack webpack-cli webpack-dev-server ts-loader typescript\n</code></pre></p> <p>Create a <code>webpack.config.js</code> file:   <pre><code>const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.ts',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  devServer: {\n    static: './',\n    hot: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        use: 'ts-loader',\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.ts', '.js'],\n  },\n};\n</code></pre></p> <p>Add the following scripts to <code>package.json</code>:   <pre><code>\"scripts\": {\n  \"start\": \"webpack serve --open\",\n  \"build\": \"webpack\"\n}\n</code></pre></p> <p>Finally run the project, and open your browser and navigate to http://localhost:3000 (or the port specified by your dev server).   You should see the Fabric.js canvas visualisation.</p> <pre><code>npm start\n</code></pre>"},{"location":"development/#api-reference","title":"API Reference","text":"<ul> <li>Check Fabric.js documentation for advanced features like groups, animations, or filters.</li> <li>For a complete overview of the jdispatcher-viewers modules and utilities, check the API Docs.</li> </ul>"},{"location":"script/","title":"Script Embedding","text":""},{"location":"script/#script-embedding","title":"Script Embedding","text":"<p>jdispatcher-viweres can be used by loading the library's JavaScript and creating a new script tag.</p>"},{"location":"script/#visual-output","title":"Visual Output","text":"<p>Visual Output can be used by embedding a script tag in HTML as shown in the example below. The visualisation can be customised to some extent.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n        &lt;title&gt;Visual Output - plugin&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" media=\"all\" /&gt;\n        &lt;script type=\"text/javascript\" src=\"https://ebi-jdispatcher.github.io/jdispatcher-viewers/assets/jd_viewers_0.1.6.bundle.min.js\" defer&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"canvas-wrapper\"&gt;\n            &lt;canvas id=\"canvas\" /&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;script&gt;\n        document.addEventListener(\"DOMContentLoaded\", async () =&gt; {\n            // Get Sequence Similarity Search JSON URL\n            // jobId should be a valid jobId\n            const jobId = \"mock_jobid-I20200317-103136-0485-5599422-np2\";\n            const data = getJdispatcherJsonURL(jobId);\n            const sssJsonResponse = await fetchData(data);\n            const sssDataObj = dataAsType(sssJsonResponse, \"SSSResultModel\");\n\n            // Render Options\n            const options = {\n                colorScheme: \"ncbiblast\",\n                scaleType: \"fixed\",\n                scoreType: \"bitscore\",\n                numberHits: 100,\n                numberHsps: 10,\n                logSkippedHsps: true,\n                canvasWrapperStroke: true,\n            };\n            // Call render method to display the viz\n            new VisualOutput(\"canvas\", sssDataObj, options).render();\n        });\n    &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"script/#functional-predictions","title":"Functional Predictions","text":"<p>Similarly for the Functional Predictions visualisation:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n        &lt;title&gt;Functional Predictions - plugin&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" media=\"all\" /&gt;\n        &lt;script type=\"text/javascript\" src=\"https://ebi-jdispatcher.github.io/jdispatcher-viewers/assets/jd_viewers_0.1.6.bundle.min.js\" defer&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"canvas-wrapper\"&gt;\n            &lt;canvas id=\"canvas\" /&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n    &lt;script&gt;\n        document.addEventListener(\"DOMContentLoaded\", async () =&gt; {\n            // Get Sequence Similarity Search JSON URL\n            // jobId should be a valid jobId\n            // const jobId = \"ncbiblast-I20220810-095736-0608-24881701-np2\";\n            const jobId = \"mock_jobid-I20200317-103136-0485-5599422-np2\";\n            const data = getJdispatcherJsonURL(jobId);\n            const sssJsonResponse = await fetchData(data);\n            const sssDataObj = dataAsType(sssJsonResponse, \"SSSResultModel\");\n\n            const iprmcXmlData = validateSubmittedDbfetchInput(sssDataObj);\n            const iprmcXmlResponse = await fetchData(iprmcXmlData, \"xml\");\n            // convert XML into Flattened JSON\n            const iprmcJSONResponse = getIPRMCDataModelFlatFromXML(\n                iprmcXmlResponse\n            );\n            const iprmcDataObj = dataAsType(\n                iprmcJSONResponse,\n                \"IPRMCResultModelFlat\"\n            );\n\n            // Render Options\n            const options = {\n                colorScheme=\"heatmap\"\n                scaleType=\"dynamic\"\n                scoreType=\"evalue\"\n                numberHits: 30,\n                canvasWrapperStroke: true,\n            };\n            // Call render method to display the viz\n            new FunctionalPredictions(\n                \"canvas\",\n                sssDataObj,\n                iprmcDataObj,\n                options\n            ).render();\n        });\n    &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"webcomponents/","title":"Web Components","text":""},{"location":"webcomponents/#web-components","title":"Web Components","text":"<p>jdispatcher-viweres can be used as Web Components. </p>"},{"location":"webcomponents/#visual-output","title":"Visual Output","text":"<p>Visual Output can be used directly as HTML elements as shown in the example below. The visualisation can be customised to some extent.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n        &lt;title&gt;Visual Output - webcomponent&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" media=\"all\" /&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@2.6.0/webcomponents-bundle.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@2.6.0/custom-elements-es5-adapter.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"https://ebi-jdispatcher.github.io/jdispatcher-viewers/assets/jd_viewers_0.1.6.bundle.min.js\" defer&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- JD Visual Output Web-component --&gt;\n        &lt;!-- data attribute should be a valid jobId --&gt;\n        &lt;jd-visual-output\n            data=\"mock_jobid-I20200317-103136-0485-5599422-np2\"\n            colorScheme=\"ncbiblast\"\n            scaleType=\"fixed\"\n            scoreType=\"bitscore\"\n            numberHits=\"100\"\n            numberHsps=\"10\"\n            logSkippedHsps=\"true\"\n            canvasWrapperStroke=\"true\"\n        &gt;&lt;/jd-visual-output&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"webcomponents/#functional-predictions","title":"Functional Predictions","text":"<p>Similarly for the Functional Predictions visualisation:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /&gt;\n        &lt;title&gt;Functional Predictions - webcomponent&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" media=\"all\" /&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@2.6.0/webcomponents-bundle.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@2.6.0/custom-elements-es5-adapter.min.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"https://ebi-jdispatcher.github.io/jdispatcher-viewers/assets/jd_viewers_0.1.6.bundle.min.js\" defer&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- JD Functional Predictions Web-component --&gt;\n        &lt;!-- data attribute should be a valid jobId --&gt;\n        &lt;jd-functional-predictions\n            data=\"mock_jobid-I20200317-103136-0485-5599422-np2\"\n            scaleType=\"dynamic\"\n            scoreType=\"evalue\"\n            colorScheme=\"heatmap\"\n            numberHits=\"30\"\n            canvasWrapperStroke=\"true\"\n        &gt;&lt;/jd-functional-predictions&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}]}